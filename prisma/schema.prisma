// Multi-tenant Charity Management System Schema
// This schema supports multiple charities (tenants) with isolated data

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== AUTHENTICATION & USERS =====

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts    Account[]
  sessions    Session[]
  memberships OrganizationMembership[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ===== MULTI-TENANT ORGANIZATION =====

model Organization {
  id          String             @id @default(cuid())
  name        String
  slug        String             @unique
  description String?
  logo        String?
  website     String?
  email       String?
  phone       String?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  country     String?
  taxId       String?            @unique
  status      OrganizationStatus @default(ACTIVE)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  // Relations
  memberships     OrganizationMembership[]
  projects        Project[]
  donations       Donation[]
  expenses        Expense[]
  categories      Category[]
  chartOfAccounts ChartOfAccount[]
  reports         Report[]
  Transaction     Transaction[]

  @@map("organizations")
}

model OrganizationMembership {
  id             String           @id @default(cuid())
  userId         String
  organizationId String
  role           OrganizationRole @default(MEMBER)
  status         MembershipStatus @default(ACTIVE)
  joinedAt       DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@map("organization_memberships")
}

// ===== ACCOUNTING =====

model ChartOfAccount {
  id             String      @id @default(cuid())
  organizationId String
  code           String
  name           String
  type           AccountType
  parentId       String?
  balance        Decimal     @default(0) @db.Decimal(15, 2)
  isActive       Boolean     @default(true)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  organization Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  parent       ChartOfAccount?  @relation("AccountHierarchy", fields: [parentId], references: [id])
  children     ChartOfAccount[] @relation("AccountHierarchy")
  transactions Transaction[]

  @@unique([organizationId, code])
  @@map("chart_of_accounts")
}

model Transaction {
  id             String          @id @default(cuid())
  organizationId String
  accountId      String
  amount         Decimal         @db.Decimal(15, 2)
  type           TransactionType
  description    String
  reference      String?
  date           DateTime
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  organization Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  account      ChartOfAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

// ===== PROJECTS & DONATIONS =====

model Project {
  id             String        @id @default(cuid())
  organizationId String
  name           String
  description    String?
  goal           Decimal?      @db.Decimal(15, 2)
  raised         Decimal       @default(0) @db.Decimal(15, 2)
  status         ProjectStatus @default(ACTIVE)
  startDate      DateTime?
  endDate        DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  donations    Donation[]

  @@map("projects")
}

model Donation {
  id             String         @id @default(cuid())
  organizationId String
  projectId      String?
  donorName      String
  donorEmail     String?
  amount         Decimal        @db.Decimal(15, 2)
  type           DonationType   @default(ONE_TIME)
  status         DonationStatus @default(PENDING)
  paymentMethod  PaymentMethod?
  notes          String?
  date           DateTime       @default(now())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  project      Project?     @relation(fields: [projectId], references: [id])

  @@map("donations")
}

// ===== EXPENSES =====

model Expense {
  id             String        @id @default(cuid())
  organizationId String
  categoryId     String?
  description    String
  amount         Decimal       @db.Decimal(15, 2)
  date           DateTime
  receipt        String?
  status         ExpenseStatus @default(PENDING)
  approvedBy     String?
  approvedAt     DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  category     Category?    @relation(fields: [categoryId], references: [id])

  @@map("expenses")
}

model Category {
  id             String   @id @default(cuid())
  organizationId String
  name           String
  description    String?
  color          String?
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  expenses     Expense[]

  @@unique([organizationId, name])
  @@map("categories")
}

// ===== REPORTS =====

model Report {
  id             String     @id @default(cuid())
  organizationId String
  name           String
  type           ReportType
  parameters     Json?
  data           Json?
  generatedAt    DateTime   @default(now())
  createdBy      String

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("reports")
}

// ===== ENUMS =====

enum OrganizationStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum OrganizationRole {
  OWNER
  ADMIN
  MANAGER
  MEMBER
  VIEWER
}

enum MembershipStatus {
  ACTIVE
  INACTIVE
  PENDING
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
}

enum TransactionType {
  DEBIT
  CREDIT
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum DonationType {
  ONE_TIME
  RECURRING
}

enum DonationStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CASH
  CHECK
  CREDIT_CARD
  BANK_TRANSFER
  PAYPAL
  OTHER
}

enum ExpenseStatus {
  PENDING
  APPROVED
  REJECTED
  PAID
}

enum ReportType {
  FINANCIAL_SUMMARY
  DONATION_REPORT
  EXPENSE_REPORT
  PROJECT_REPORT
  TAX_REPORT
}
